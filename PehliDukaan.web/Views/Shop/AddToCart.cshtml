@model CheckoutViewModel
@{
    ViewBag.Title = "AddToCart";
}

<div class="page-title parallax parallax1">
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <div class="page-title-heading">
                    <h1 class="title">Add To Cart</h1>
                </div><!-- /.page-title-heading -->
            </div><!-- /.col-md-12 -->
        </div><!-- /.row -->
    </div><!-- /.container -->
</div><!-- /.page-title -->

<link href="//maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css" rel="stylesheet">
@if (Model != null && Model.CartProducts != null && Model.CartProducts.Any()) {
    <div class="container">
        <table id="cart" class="table table-hover table-condensed">
            <thead>
                <tr>
                    <th style="width:50%">Product</th>
                    <th style="width:10%">Price</th>
                    <th style="width:8%">Quantity</th>
                    <th style="width:22%" class="text-center">Subtotal</th>
                    <th style="width:10%"></th>
                </tr>
            </thead>
            @foreach (var product in Model.CartProducts) {
                <tbody>
                    <tr>
                        <td data-th="Product">
                            <div class="row">
                                <div class="col-sm-2 hidden-xs"><img src="@product.ImageURL" alt="" class="img-responsive" /></div>
                                <div class="col-sm-10">
                                    <h4 class="nomargin">@product.Name</h4>
                                    <p>
                                        @product.Description
                                    </p>
                                </div>
                            </div>
                        </td>
                        <td data-th="Price">@product.Price</td>
                        <td data-th="Quantity">
                            <input type="number" class="form-control text-center" value="@product.Quantity" min="1" onchange="quantityChange(@product.Id, event.target.value)">
                        </td>
                        <td data-th="Subtotal" class="text-center">$5.11</td>
                        <td class="actions" data-th="">
                            <button class="delete-btn" onclick="productDelete(@product.Id)"><i class="fa fa-trash-o"  data-id=" @product.Id"></i> </button>
                        </td>
                    </tr>
                </tbody>
            }
            <tfoot>
                <tr class="visible-xs">
                    <td class="text-center"><strong>Total $ 5.11</strong></td>
                </tr>
                <tr>
                    <td><a href="#" class="btn btn-warning"><i class="fa fa-angle-left"></i> Continue Shopping</a></td>
                    <td colspan="2" class="hidden-xs"></td>
                    <td class="hidden-xs text-center"><strong>Total $ 5.11</strong></td>
                    <td><a href="#" class="btn btn-success btn-block">Checkout <i class="fa fa-angle-right"></i></a></td>
                </tr>
            </tfoot>
        </table>
    </div>
}
else {
    <div>
        <b>No Products in Cart.</b>
    </div>
}



<script>
    const ProductCartCookieName = "CartProducts";

    function productDelete(productId) {
        const cartItems = getCookieJsonItems(ProductCartCookieName);
        const existingProduct = findFromObject(cartItems, item => item.id === productId);
        if (!existingProduct) {
            console.error("Unable to find product");
            return;
        }

        deleteFromObject(cartItems, x => x.id === productId);
        addCookieJsonItems(cartItems, ProductCartCookieName);

    }


    function quantityChange(productId, value) {
        const cartItems = getCookieJsonItems(ProductCartCookieName);
        console.log({
            cartItems,
            productId,
            value,
        })
        const existingProduct = findFromObject(cartItems, item => item.id === productId);
        if (!existingProduct) {
            console.error("Unable to find product");
            return;
        }

        existingProduct.quantity = value;

        console.log(cartItems);
        addCookieJsonItems(cartItems, ProductCartCookieName);
    }

    var products;
    $(".productAddToCart").click(function () {
        const cartItems = getCookieJsonItems(ProductCartCookieName);


        if (existingCookieData != undefined && existingCookieData != "" && existingCookieData != null) {
            products = existingCookieData.split('-');
        }
        else {
            products = [];
        }

        var productID = $(this).attr('data-id');

        products.push(productID);

        $.cookie('CartProducts', products.join('-'), { path: '/' });

        updateCartProducts();

        swal("Done", "Product Added to Cart!", "success");
    });

   

</script>
