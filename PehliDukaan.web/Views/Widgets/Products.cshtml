@model ProductsWidgetViewModel

@{
    var defaultImageURL = "/Content/images/system/placeholder-image.png";
    string GetImageUrlFromImageData(byte[] imageData) {
        if (imageData != null && imageData.Length > 0) {
            return "data:image/jpeg;base64," + Convert.ToBase64String(imageData);
        }
        return defaultImageURL;
    }
}

@if (Model != null && Model.Products != null) {
    if (!Model.IsLatestProducts) {
        <ul class="flat-filter style-1 text-center max-width-682 clearfix">
            <li class="active"><a href="#" data-filter="*">All Product</a></li>

            @foreach (var category in Model.Products.Select(x => x.Category).ToList().Distinct()) {
                <li><a href="#" data-filter=".@category.Name.ToLower()">For @category.Name</a></li>
            }
        </ul>
        <div class="divider h54"></div>
    }
<div class="product-content product-fourcolumn clearfix">
    <ul class="product style2 isotope-product clearfix">

        @foreach (var product in Model.Products) {
            var imageURL = GetImageUrlFromImageData(product.ImageData);

            <li class="product-item">
                <div class="product-thumb clearfix">
                    <a href="@Url.Action("Details", "Product", new { ID = product.Id })">
                        <img src="@imageURL" alt="image" style="height: 295px;">
                    </a>
                </div>
                <div class="product-info clearfix">
                    <span class="product-title">
                        @product.Name
                    </span>
                    <div class="price">
                        <ins>
                            <span class="amount">$ @product.Price</span>
                        </ins>
                    </div>
                </div>
                <div class="add-to-cart text-center">
                    <a class="productAddToCart" data-id="@product.Id">ADD TO CART</a>
                </div>
                <a href="#" class="like"><i class="fa fa-heart-o"></i></a>
            </li>
        }
    </ul><!-- /.product -->
</div><!-- /.product-content -->
}




<script>
    var flatIsotope = function () {
        if ($().isotope) {
            var $container = $('.isotope-product');
            $container.imagesLoaded(function () {
                $container.isotope({
                    itemSelector: '.product-item',
                    transitionDuration: '1s',
                    layoutMode: 'fitRows'
                });
            });

            $('.flat-filter li').on('click', function () {
                var selector = $(this).find("a").attr('data-filter');
                $('.flat-filter li').removeClass('active');
                $(this).addClass('active');
                $container.isotope({ filter: selector });
                return false;
            });
        };
    }; 
    var addToCartButtons = document.querySelectorAll(".productAddToCart");

    // Add event listener to each add to cart button
    addToCartButtons.forEach(function (button) {
        button.addEventListener("click", function () {
            const productId = this.dataset.id;
            addOrUpdateProductInShoppingCart(productId);

            updateCartProducts();
            swal("Done", "Product Added to Cart!", "success");
        });
    });
</script>